export declare module CssConstants {
    interface ClassAndSelector {
        className: string;
        selectorName: string;
    }
    function createClassAndSelector(className: string): ClassAndSelector;
    const styleAttribute = "style";
    const pixelUnits = "px";
    const heightProperty = "height";
    const widthProperty = "width";
    const topProperty = "top";
    const bottomProperty = "bottom";
    const leftProperty = "left";
    const rightProperty = "right";
    const marginTopProperty = "margin-top";
    const marginLeftProperty = "margin-left";
    const displayProperty = "display";
    const backgroundProperty = "background";
    const backgroundColorProperty = "background-color";
    const backgroundRepeatProperty = "background-repeat";
    const backgroundSizeProperty = "background-size";
    const backgroundImageProperty = "background-image";
    const textShadowProperty = "text-shadow";
    const textAlignProperty = "text-align";
    const borderProperty = "border";
    const borderTopWidthProperty = "border-top-width";
    const borderBottomWidthProperty = "border-bottom-width";
    const borderLeftWidthProperty = "border-left-width";
    const borderRightWidthProperty = "border-right-width";
    const fontSizeProperty = "font-size";
    const fontWeightProperty = "font-weight";
    const colorProperty = "color";
    const opacityProperty = "opacity";
    const paddingLeftProperty = "padding-left";
    const paddingRightProperty = "padding-right";
    const positionProperty = "position";
    const maxWidthProperty = "max-width";
    const minWidthProperty = "min-width";
    const overflowProperty = "overflow";
    const overflowXProperty = "overflow-x";
    const overflowYProperty = "overflow-y";
    const transformProperty = "transform";
    const webkitTransformProperty = "-webkit-transform";
    const cursorProperty = "cursor";
    const visibilityProperty = "visibility";
    const absoluteValue = "absolute";
    const zeroPixelValue = "0px";
    const autoValue = "auto";
    const hiddenValue = "hidden";
    const noneValue = "none";
    const blockValue = "block";
    const inlineBlockValue = "inline-block";
    const transparentValue = "transparent";
    const boldValue = "bold";
    const visibleValue = "visible";
    const tableRowValue = "table-row";
    const coverValue = "cover";
    const pointerValue = "pointer";
    const scrollValue = "scroll";
}
export interface ExtendedCSSProperties extends CSSStyleDeclaration {
    scrollbarShadowColor: string;
    scrollbarHighlightColor: string;
    layoutGridChar: string;
    layoutGridType: string;
    textAutospace: string;
    textKashidaSpace: string;
    writingMode: string;
    scrollbarFaceColor: string;
    backgroundPositionY: string;
    lineBreak: string;
    imeMode: string;
    msBlockProgression: string;
    layoutGridLine: string;
    scrollbarBaseColor: string;
    layoutGrid: string;
    layoutFlow: string;
    textKashida: string;
    filter: string;
    zoom: string;
    scrollbarArrowColor: string;
    behavior: string;
    backgroundPositionX: string;
    accelerator: string;
    layoutGridMode: string;
    textJustifyTrim: string;
    scrollbar3dLightColor: string;
    msInterpolationMode: string;
    scrollbarTrackColor: string;
    scrollbarDarkShadowColor: string;
    styleFloat: string;
    getAttribute(attributeName: string, flags?: number): any;
    setAttribute(attributeName: string, AttributeValue: any, flags?: number): void;
    removeAttribute(attributeName: string, flags?: number): boolean;
    pixelWidth: number;
    posHeight: number;
    posLeft: number;
    pixelTop: number;
    pixelBottom: number;
    textDecorationNone: boolean;
    pixelLeft: number;
    posTop: number;
    posBottom: number;
    textDecorationOverline: boolean;
    posWidth: number;
    textDecorationLineThrough: boolean;
    pixelHeight: number;
    textDecorationBlink: boolean;
    posRight: number;
    pixelRight: number;
    textDecorationUnderline: boolean;
    webkitTransform: string;
}
